DPV-프로젝트 공모전 참여에 관한 추가 자료

(1)(1)local에서동작.mp4와 (2)로컬 작동시 기록.GIF 자료를 통해, 로컬 환경의 파이썬 스크립트에서는 감지 기능이 정상적으로 작동하고 그 결과를 기록하고 있음을 확인할 수 있습니다.

초기 파이썬 기반의 코드 작성 후, 서비스 배포에 유리한 형태로의 리팩토링을 통해 의존성을 줄이는 작업을 했고 이후
서비스 배포를 위하여 AWS 서버를 구축하고 모델을 업로드한 후 여러 차례 디버깅을 진행했습니다.

그러나 (3) weblog기록.mp4와 (4) 추가자료 캡쳐.GIF에서 볼 수 있듯이, /process 경로로의 POST 요청은 여러 번 수신되어도, 모든 요청이 HTTP 상태 코드 200으로 성공적으로 처리되고있습니다.

이 문제에 대해, 서버 동작의 문제점을 중심으로 고민 중입니다. 특히, 동시에 너무 많은 요청이 발생하면 서버의 리소스가 부족해져 감지 기능이 제대로 작동하지 않을 수 있다고 생각하고 있습니다. 
(5) aws 프리티어 한도.GIF 자료를 보면, AWS 프리티어의 한도 초과로 인해 CPU와 메모리 사용량이 과도하게 증가하고 있음을 알 수 있습니다.

이번 공모전 준비 과정에서, 로컬 환경에서의 개발만으로는 충분하지 않고, 실제 서비스 배포 시에는 객체 지향적인 접근, 낮은 의존성 유지,
 그리고 다양한 제약 조건의 고려가 필요하다는 것을 깨달았습니다. 이 경험을 통해 팀원 모두가 이러한 중요성을 깊게 인식하게 되었습니다.

※ 영상이 재생 되지 않을 경우(window 10환경)_ 
HEVCVideoExtension 해당 코덱의 설치가 필요_설치 파일을 첨부합니다.
Microsoft.HEVCVideoExtension_1.0.40203.0_x64.zip


--붙임 파일--
(1)local에서동작.mp4
(2)로컬 작동시 기록.GIF
(3) weblog기록.mp4
(4) 추가자료 캡쳐.GIF
(5) aws 프리티어 한도.GIF
(6) appr5.py
(7)공모전 제출_리팩토링전2.ipynb - 최초 코딩 작업을 마무리하던 시점의 테스트 파일입니다.
(8)설치 모듈 - (7)을 실행하기 위해 필요한 모듈과 설치 과정이 요약된 (9)을 함께 첨부합니다.
(9)dlib설치 메뉴얼


